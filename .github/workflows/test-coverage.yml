name: Test-Lint-Deploy

on: push

jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.8] #[3.6, 3.7, 3.8, 3.9, '3.x']
        mongodb-version: ["3.6.8"] #[4.0, 4.2, 4.4]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up monogdb
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
      - name: Install deps
        run: |
          sudo apt install libmagickwand-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: build and install wheel
        run: |
          make build
          pip install dist/*.whl
      - name: Run Tests
        run: pytest

  coverage-lint-reports:
    name: Coverage Linting
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set up monogdb
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: "3.6.8"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        
      - name: install as pip editable
        run: pip install -e .

      - name: tests with coverage
        run: coverage run --source=inventorius -m pytest --junitxml=test-results/pytest/results.xml

      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test results
          path: test-results/
        if: ${{ always() }}

      - name: Coverage Report
        run: |
          coverage report
          COVERAGE=`coverage report | grep "^TOTAL" | awk '{print $4}'`
          echo $COVERAGE
          echo coverageText="$COVERAGE" >> $GITHUB_ENV

      - name: Update Badge
        uses: schneegans/dynamic-badges-action@v1.0.0
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          gistID: c6358499cfa820bcffe8535e6cabd586
          filename: coverage-inventory-v2-api-badge.json
          label: coverage
          message: ${{ env.coverageText }}
          color: orange
          cacheSeconds: 300
  package:
    name: Build .deb package and deploy
    runs-on: ubuntu-20.04
    needs: test

    steps: 
      - name: Checkout
        uses: actions/checkout@v2
      - name: build
        run: |
          pip install -U build
          make build
      - name: package
        run: make deb
      - name: get deb name
        run: echo "deb_name=$(basename dist/*.deb)" >> $GITHUB_ENV
      - name: artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.deb_name }}
          path: dist/${{ env.deb_name }}

      - name: setup private key
        env:
          PRIVKEYENCRYPTED: ${{ secrets.DEPLOY_PRIVKEY_GPG_PASSWORD }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PRIVKEYENCRYPTED" --output github_id_rsa deployment-ci/github_id_rsa.gpg
          chmod 600 github_id_rsa
      - name: unpack secrets.ini
        env:
          PRIVKEYENCRYPTED: ${{ secrets.DEPLOY_SECRETS_INI_GPG_PASSWORD }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$PRIVKEYENCRYPTED" --output secrets.ini deployment-ci/secrets.ini.gpg
      - name: upload secrets.ini
        run: scp -i github_id_rsa -o UserKnownHostsFile=deployment-ci/known_hosts secrets.ini root@computemachines.com:secrets.ini
      - name: download packaged build
        uses: actions/download-artifact@v4.1.7
        with:
          name: ${{ env.deb_name }}
      - name: upload to production server
        run: scp -i github_id_rsa -o UserKnownHostsFile=deployment-ci/known_hosts $DEB_NAME root@computemachines.com:$DEB_NAME
        env:
          DEB_NAME: ${{ env.deb_name }}
      - name: Run deployment commands on production server
        run: |
          ssh -i github_id_rsa -o UserKnownHostsFile=deployment-ci/known_hosts root@computemachines.com "dpkg -i $DEB_NAME"
        env:
          DEB_NAME: ${{ env.deb_name }}