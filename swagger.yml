openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - url: https://computemachines.com/api
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/computemachines/Inventory/2.0.0
info:
  description: "An API that provides operations to manage and track inventory items and corresponding financial information for managerial accounting,"
  version: "3.1.0"
  title: Inventory API
  contact:
    email: tparker@computemachines.com
tags:
  - name: Bins
    description: CRUD operations on Bins
  - name: Units
    description: CRUD operations on SKU definitions, Batchs, and individual Units
  - name: Inventory
    description: Common inventory management operations
paths:
  /bins:
    get:
      tags: [Bins]
      description: List summary information about bins in inventory system.
      parameters:
        - name: limit
          in: query
          description: The max number of bins to return per request
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 20
        - name: startingFrom
          in: query
          description: The number of bins to skip. Useful for pagination.
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 20
      responses:
        200:
          description: Successful pull of bin info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bin'
        400:
          description: Malformed Request. Possible pagination query parameter constraint violation.
    post:
      tags: [Bins]
      description: Create a new empty bin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: BIN000012
                props:
                  $ref: '#/components/schemas/BinProperties'
      responses:
        201:
          description: Successfully created a new bin
          headers:
            Location:
              description: Location of the created resource
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/bin/BIN000012"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bin"
        409:
          description: Bin already exists
          headers:
            Location:
              description: Location of the existing resource
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/bin/BIN000012"
  /bin/{id}:
    parameters:
      - name: id
        in: path
        schema:
          type: string
          example: BIN000012
        required: true
    get:
      tags: [Bins]
      description: Get extended information about a specific bin including its contents.
      responses:
        200:
          description: Information about specified bin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'
        404:
          description: The bin does not exist
    put:
      tags: [Bins]
      description: Update bin props
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Bin'
      responses:
        200:
          description: Updated
        400:
          description: Bad bin format. Don't try to update bin contents with this endpoint.
        404:
          description: Bin does not exist
    delete:
      tags: [Bins]
      description: Delete a bin
      parameters:
        - in: query
          name: force
          description: Delete any contents
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Bin was deleted along with all contents, if any.
        403:
          description: The bin is not empty and force was not set to true.
        404:
          description: The bin does not exist so can not be deleted.
  /uniqs:
    post:
      tags: [UNIQ]
      description: Create a new, fully-formed UNIQ unit
      parameters:
        - name: from_sku
          in: query
          description: form uniq from this sku
          schema:
            type: string
            example: SKU00051
        - name: from_bin
          in: query
          description: form uniq from sku in this bin. Leave formed uniq in this bin. Bin should have one fewer sku.
          schema:
            type: string
            example: BIN00081
      requestBody:
        description: Unit to post to collection.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                sku_id:
                  type: string
          application/json:
            schema:
              $ref: '#/components/schemas/UNIQ'
      responses:
        201:
          description: Successfully created a new unit
          headers:
            Location:
              description: Location of the created unit
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/unit/UNIQ00012"
        404:
          description: Bin or parent sku does not exist.
          headers:
            Location:
              description: Location of the resource that needs to be created.
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/bin/BIN0000013"
        409:
          description: Unit already exists
          headers:
            Location:
              description: Location of the existing unit
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/unit/UNIQ00012"
  /skus:
    post:
      tags: [SKU]
      description: Define a sku that can be used by other operations.
      requestBody:
        description: Sku to define.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SKU'
      responses:
        201:
          description: Successfully defined a new sku
          headers:
            Location:
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/sku/SKU000012"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SKU'
        409:
          description: Sku already exists
          headers:
            Location:
              description: Location of the existing sku
              schema:
                type: string
                format: uri
                example: "https://computemachines.com/api/sku/SKU000012"
  /sku/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: SKU000081
      - name: details
        in: query
        required: false
        schema:
          type: boolean
          default: false
    get:
      tags: [SKU]
      description: Get summary info on an Sku.
      responses:
        200:
          description: Successful pull of sku info.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SKU'
                  - allOf:
                    - $ref: '#/components/schemas/SKU'
                    - $ref: '#/components/schemas/ExtraDetails'
                discriminator:
                  propertyName: detailed
        404:
          description: Sku does not exist.
    put:
      tags: [SKU]
      description: Update sku info
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/SKU'
      responses:
        200:
          description: Updated
        400:
          description: Bad sku format. Don't try to update bin locations with this endpoint.
        404:
          description: Sku does not exist
    delete:
      tags: [SKU]
      parameters:
        - name: force
          description: Delete all units with this sku. DANGER.
          in: query
          required: false
          schema:
            type: boolean
            default: false
      description: Delete a sku definition.
      responses:
        200:
          description: Successfully deleted the sku definition.
        403:
          description: Must delete all instances of this SKU first or set force=true.
        404:
          description: Sku does not exist.
  /bin/{binId}/sku/{skuId}:
    parameters:
      - name: binId
        in: path
        required: true
        schema:
          type: string
          example: BIN00082
      - name: skuId
        in: path
        required: true
        schema:
          type: string
          example: SKU0123
    delete:
      tags: [SKU]
      parameters:
        - name: count
          in: query
          description: number of skus to remove from bin.
          schema:
            type: integer
            minimum: 0
      description: Remove count skus from bin.
      responses:
        200:
          description: Sku was deleted
        404:
          description: Sku or Bin does not exist.
  /uniq/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: UNIQ00081
    get:
      tags: [UNIQ]
      description: Get info on unit with this UNIQ code.
      responses:
        200:
          description: Successful pull of uniq info.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        404:
          description: The unit can not be found
    put:
      tags: [UNIQ]
      description: Update uniq info
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/UNIQ'
      responses:
        200:
          description: Updated
        400:
          description: Bad format. Don't try to update uniq locations with this endpoint.
        404:
          description: uniq does not exist
    delete:
      description: Dissolve uniq back to sku or just delete unit
      parameters:
        - name: dissolve
          in: query
          description: Convert the UNIQ to SKU. If false then just delete UNIQ.
          required: true
          schema:
            type: boolean
      tags: [UNIQ]
      responses:
        200:
          description: Unit was deleted.
        404:
          description: The unit does not exist so can not be deleted.
          
  /batches:
    post:
      tags: [Batch]
      description: Create new batch
      parameters:
        - name: sku
          in: query
          required: true
          description: The type of units (SKU) in the batch.
          schema:
            type: string
            example: SKU0123
      responses:
        201:
          description: Successfully created new batch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        404:
          description: SKU does not exist
  /batch/{batch_id}:
    parameters:
      - name: batch_id
        in: path
        required: true
        schema:
          type: string
          example: BATCH0002
    get:
      tags: [Batch]
      description: Get info on batch
      responses:
        200:
          description: successful pull of batch info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
        404:
          description: Batch does not exist
    put:
      tags: [Batch]
      description: Update batch props
      requestBody:
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Batch'
      responses:
        200:
          description: Updated
        400:
          description: Bad format. Don't try to update batch locations with this endpoint.
        404:
          description: batch does not exist
    post:
      tags: [Batch]
      description: Add count skus from from_bin_id into batch_id in to_bin_id.
      parameters:
        - name: sku_id
          in: query
          required: true
          schema:
            type: string
        - name: from_bin_id
          in: query
          required: true
          schema:
            type: string
        - name: to_bin_id
          in: query
          description: required if count is not 'all'
          schema:
            type: string
        - name: count
          in: query
          description: number of skus from from_bin_id to add to batch in to_bin_id. 'All' indicates all skus in from_bin_id.
          schema:
            oneOf:
              - type: integer
                minimum: 0
              - enum: [all]
            default: all
      responses:
        200:
          description: Added skus to batch
        403:
          description: Some constraint violation
        404:
          description: Batch, bins, or sku not found.
    delete:
      tags: [Batch]
      description: Delete empty batch or Dissolve dissolve_count units in batch into pure skus
      parameters:
        - name: dissolve_count
          in: query
          schema:
            oneOf:
              - type: integer
                minimum: 0
                default: 0
              - enum: [all]
      responses:
        200:
          description: Batch was dissolved
        403:
          description: Batch must be empty to delete without dissolve.
        404: 
          description: Batch does not exist
  /move:
    post:
      tags: [Inventory]
      description: Move a number of units to a new bin.
      parameters:
        - name: sku
          in: query
          description: The SKU to move. Exclusive (sku|uniq|batch)
          schema:
            type: string
            example: SKU0123
        - name: uniq
          in: query
          description: The UNIQ to move. Exclusive (sku|uniq|batch)
          schema:
            type: string
            example: UNIQ0002
        - name: batch
          in: query
          description: The (partial) Batch to move. Exclusive (sku|uniq|batch)
          schema:
            type: string
            example: BATCH002
        - name: from
          in: query
          description: The bin units are moved out of. Required for sku or batch.
          schema:
            type: string
            example: BIN00081
        - name: to
          in: query
          description: The bin to move units into.
          required: true
          schema:
            type: string
            example: BIN00082
        - name: count
          in: query
          description: The number of units to move. Required for sku and batch.
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Successfully moved unit
          headers:
            Location:
              description: The URI of the unit
              schema:
                type: string
                format: uri
                example: https://computemachines.com/api/unit/SKU000081
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bin'
        400:
          description: constraint violation
        404:
          description: Either the unit or the bin does not exist.
  /next/{kind}:
    parameters:
      - in: path
        name: kind
        required: true
        schema:
          type: string
          enum: [bin, uniq, sku, batch]
    get:
      tags: [Inventory]
      description: Get the next unused SKU,BIN,UNIQ, or BATCH code.
      responses:
        200:
          description: The next unused code of type `kind`
          content:
            application/json:
              schema:
                type: string
                example: SKU00081
  /receive:
    post:
      tags: [Inventory]
      description: Create new sku instances in a receiving bin with optional batch.
      parameters:
        - name: bin_id
          in: query
          schema:
            type: string
            default: RECEIVE
            example: RECEIVE
        - name: sku_id
          in: query
          schema:
            type: string
            example: SKU00087
        - name: batch_id
          in: query
          schema:
            type: string
            example: BATCH002
        - name: quantity
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
      responses:
        200:
          description: Successfully added new unit. Return label to print.
        404:
          description: SKU does not exist.
  /search:
    get:
      tags: [Inventory]
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: sort
          in: query
          schema:
            type: string
        - name: filter
          in: query
          schema:
            type: string
        - name: limit
          in: query
          description: The max number of results to return per request
          schema:
            type: integer
            minimum: 10
            maximum: 1000
            default: 20
        - name: startingFrom
          in: query
          description: The number of results to skip. Useful for pagination.
          schema:
            type: integer
            minimum: 0
            default: 0
            example: 20
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_num_results:
                    type: number
                    example: 100
                  starting_from: 
                    type: number
                    example: 0
                  limit:
                    type: number
                    example: 20
                  returned_num_results:
                    type: number
                    example: 15
                  results:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/Bin'
                        - $ref: '#/components/schemas/Unit'
components:
  schemas:
    BinProperties:
      description: "Additional properties"
      additionalProperties: true
      example:
        bin dimensions: ['100mm', '200mm', '60mm']
        process: Receive
    Bin:
      description: Complete information about a Bin 
      properties:
        id:
          type: string
          example: 'BIN0000012'
        contents:
          type: array
          items:
            oneOf:
              - type: object
                properties:
                  sku_id:
                    type: string
                    example: SKU000012
                  quantity:
                    type: integer
                    minimum: 1
                    example: 1
              - type: object
                properties:
                  batch_id:
                    type: string
                    example: BAT000012
                  quantity:
                    type: integer
                    minimum: 1
                    example: 1
              - type: object
                properties:
                  uniq_id:
                    type: string
                    example: SKU000012
                  quantity:
                    type: integer
                    enum: [1]
        props:
          $ref: '#/components/schemas/BinProperties'
    UnitProperties:
      description: 'Additional Properties'
      additionalProperties: true
      example:
        dc gain: 100db
    ExtraDetails:
      description: 'Information available in other api calls, but useful to include.'
      properties:
        bins:
          type: array
          items:
            type: object
            properties:
              bin:
                type: string
                example: 'BIN000012'
              kind:
                type: string
                enum: [sku, batch, uniq]
              quantity:
                type: integer
                description: The number of this sku in this bin. If `kind` is `uniq` then this number must be 1.
                example: 10
                default: 1
                
    SKU:
      description: A definition of a physical unit.
      properties:
        unit type:
          type: string
          enum: [SKU]
        id:
          type: string
          example: SKU000081
        owned codes:
          type: array
          items:
            type: string
            description: Any code that maps to only this SKU. Can be a product number, ASIN, GTIN, IAN etc, as long as they do not reference any other SKUs. List must start with the SKU id.
          example: ["SKU000081", "12345678"]
        associated codes:
          type: array
          items:
            type: string
            description: Codes that should not be owned codes of any other SKU because they might be physically attached to this unit. Scan every barcode on the unit. A code can be associated with multiple SKU.
        name:
          type: string
          description: A useful, human-readable name for this item. 
          example: "Op-Amp (Through-Hole) - LM358"
        average unit original cost:
          type: string
          format: currency
          description: Asset cost per unit averaged over all units with this SKU at the time of each unit's production or purchase.
        props:
          $ref: '#/components/schemas/UnitProperties'
      required:
        - id
        - owned codes
        - name
        
    BatchProperties:
      properties:
        original cost:
          type: string
          format: currency
          description: Total asset cost at the time of production, purchase or assembly. Should be equal to the the sum of 'value consumed' in assembly or the sku original cost.
        original cost per unit:
          type: string
          format: currency
          description: original cost divided by the unit count.
        asset value:
          type: string
          format: currency
          description: 'Total asset value of this batch. Used for computing Assets and Cost Of Goods Sold for accounting. Must include effects of consumption and depreciation.'
        asset value per unit:
          type: string
          format: currency
          description: 'Asset value divided by unit count'
        unit count:
          type: integer
        assembly:
          description: "A set of units that contributed to the production of this batch. Assembled units must reduce their 'asset value' by the 'value consumed' of this unit"
          type: array
          items:
            type: object
            properties:
              unit:
                $ref: '#/components/schemas/Unit'
              value consumed:
                type: string
                format: currency
        assembly date:
          type: string
          format: date
        expiration date:
          type: string
          format: date
        
    Batch:
      description: A set of units of an SKU that for some reason need to be distinguised from other units with the same SKU. A unit can be in at most one batch. All units in a batch must not be in the same bin as any units of the same SKU that are not in the batch. Batches can be split, formed and dissolved.
      properties:
        unit type:
          type: string
          enum: [Batch]
        id:
          type: string
          example: BATCH00081
        bins:
          type: array
          items:
            type: object
            properties:
              bin:
                type: string
                example: BIN000076
              count:
                type: integer
                example: 10
        sku:
          $ref: '#/components/schemas/SKU'
        props:
          $ref: '#/components/schemas/BatchProperties'
      required:
        - sku
        - id
    UNIQ:
      description: "A single unit labeled with a globally uniq serial number prefixed by 'UNIQ'. Can optionally inherit properties from an SKU. A UNIQ label should be persistent across the lifetime of the part. A single item batch."
      properties:
        unit type:
          type: string
          enum: [UNIQ]
        id:
          type: string
          example: UNIQ00008
        bin:
          $ref: '#/components/schemas/Bin'
        sku:
          $ref: '#/components/schemas/SKU'
        name:
          type: string
          description: A useful, human-readable name for this item. 
          example: "Op-Amp (Through-Hole) - LM358"
        original cost:
          type: string
          format: currency
          description: Asset price at the time of production or purchase. Should be equal to the the sum of 'value consumed' in assembly or the sku original cost.
        asset value:
          type: string
          format: currency
          description: 'Used for computing Assets and Cost Of Goods Sold for accounting. Must include effects of consumption and depreciation.'
        assembly:
          description: "A set of units that contributed to the production of this unit. Assembled units must in total reduce their 'asset value' by the 'value consumed'"
          type: array
          items:
            type: object
            properties:
              unit:
                $ref: '#/components/schemas/Unit'
              value consumed:
                type: string
                format: currency
        
        assembly date:
          type: string
          format: date
        expiration date:
          type: string
          format: date
        props:
          $ref: '#/components/schemas/UnitProperties'
          
    Unit:
      description: Algerbraic data type.
      oneOf:
        - $ref: '#/components/schemas/SKU'
        - $ref: '#/components/schemas/Batch'
        - $ref: '#/components/schemas/UNIQ'
      discriminator:
        propertyName: unit type